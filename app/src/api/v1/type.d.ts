/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Root
         * @description エンジンの起動状態を取得。
         */
        get: operations["read_root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/speakers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Speakers
         * @description 話者情報の取得。
         */
        get: operations["get_speakers_v1_speakers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/estimate_prosody": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Estimate Prosody
         * @description テキストから韻律を取得。（辞書を用いた推論）
         */
        post: operations["estimate_prosody_v1_estimate_prosody_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/estimate_prosody_from_kana": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Estimate Prosody From Kana
         * @description テキストから韻律を取得。（辞書を用いない推論、かな文字のみ対応）
         */
        post: operations["estimate_prosody_from_kana_v1_estimate_prosody_from_kana_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/estimate_f0": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Estimate F0
         * @description wavの周波数情報を取得。
         */
        post: operations["estimate_f0_v1_estimate_f0_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/predict": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Predict
         * @description テキストから音声を予測。機械学習による推論処理なので時間がかかる。prosodyDetailなしでtextだけでも推論可能。textとprosodyDetailではprosodyDetailが優先される。
         */
        post: operations["predict_v1_predict_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/predict_with_duration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Predict
         * @description predictと同時にduration情報も得る。
         */
        post: operations["predict_v1_predict_with_duration_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/process": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Process
         * @description 音声を加工。機械学習による推論ではないため処理時間は短い。
         */
        post: operations["process_v1_process_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/process_with_pitch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Process With Pitch
         * @description 廃止。processにリダイレクト。
         */
        post: operations["process_with_pitch_v1_process_with_pitch_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/synthesis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Synthesis
         * @description predict+processの処理。
         */
        post: operations["synthesis_v1_synthesis_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/set_dictionary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set Dictionary
         * @description 辞書の設定。
         */
        post: operations["set_dictionary_v1_set_dictionary_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/set_default_processing_algorithm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set Default Processing Algorithm
         * @description デフォルトの音声加工アルゴリズムの設定。
         */
        post: operations["set_default_processing_algorithm_v1_set_default_processing_algorithm_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/download_info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Download Info
         * @description キャラクターダウンロード情報を取得。
         */
        get: operations["get_download_info_v1_download_info_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/downloadable_speakers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Downloadable Speakers
         * @description キャラクターダウンロード情報を取得（話者を主体とした情報）。
         */
        get: operations["get_downloadable_speakers_v1_downloadable_speakers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/speaker_folder_path": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Speaker Folder Path
         * @description キャラクターのフォルダパスを取得。
         */
        get: operations["get_speaker_folder_path_v1_speaker_folder_path_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/query2prosody": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Speaker Folder Path
         * @description v1のqueryをprosodyに変換。
         */
        post: operations["speaker_folder_path_v1_query2prosody_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/style_id_to_speaker_meta": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Speaker Folder Path
         * @description style_idだけでスピーカー情報を取得。重複があった場合は後にロードしたスピーカーが優先される。
         */
        post: operations["speaker_folder_path_v1_style_id_to_speaker_meta_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sample_voice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Sample Voice
         * @description 話者のサンプルボイスを取得する。
         */
        get: operations["get_sample_voice_v1_sample_voice_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/speaker_policy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Speaker Policy
         * @description 話者のpolicyファイルを取得する
         */
        get: operations["get_speaker_policy_v1_speaker_policy_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/update_info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Update Info
         * @description アップデート情報を取得する。
         */
        get: operations["get_update_info_v1_update_info_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/engine_info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Engine Info
         * @description エンジンの情報を取得する。
         */
        get: operations["get_engine_info_v1_engine_info_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AccentPhrase */
        AccentPhrase: {
            /** Moras */
            moras: components["schemas"]["coeirocore__v_util__Mora"][];
            /** Accent */
            accent: number;
            pauseMora?: components["schemas"]["coeirocore__v_util__Mora"];
            /** Isinterrogative */
            isInterrogative: boolean;
        };
        /** AlgorithmSettings */
        AlgorithmSettings: {
            /** Processingalgorithm */
            processingAlgorithm: string;
        };
        /** AudioQuery */
        AudioQuery: {
            /** Accentphrases */
            accentPhrases: components["schemas"]["AccentPhrase"][];
            /** Speedscale */
            speedScale: number;
            /** Pitchscale */
            pitchScale: number;
            /** Intonationscale */
            intonationScale: number;
            /** Volumescale */
            volumeScale: number;
            /** Prephonemelength */
            prePhonemeLength: number;
            /** Postphonemelength */
            postPhonemeLength: number;
            /** Outputsamplingrate */
            outputSamplingRate: number;
            /** Outputstereo */
            outputStereo: boolean;
            /** Kana */
            kana?: string;
        };
        /** DictionaryWord */
        DictionaryWord: {
            /** Word */
            word: string;
            /** Yomi */
            yomi: string;
            /** Accent */
            accent: number;
            /** Nummoras */
            numMoras: number;
        };
        /** DictionaryWords */
        DictionaryWords: {
            /** Dictionarywords */
            dictionaryWords: components["schemas"]["DictionaryWord"][];
        };
        /** DownloadableModel */
        DownloadableModel: {
            /** Download Path */
            download_path: string;
            /** Volume */
            volume: string;
            speaker: components["schemas"]["Speaker"];
            speaker_info: components["schemas"]["SpeakerInfo"];
        };
        /** DownloadableSpeaker */
        DownloadableSpeaker: {
            /** Speakername */
            speakerName: string;
            /** Speakeruuid */
            speakerUuid: string;
            /** Subspeakeruuids */
            subSpeakerUuids: string[];
            /** Styles */
            styles: components["schemas"]["DownloadableStyle"][];
            /** Version */
            version: string;
            /** Portraitbase64 */
            portraitBase64: string;
            /** Metadownloadurl */
            metaDownloadUrl: string;
            /** Prefix */
            prefix: string;
        };
        /** DownloadableStyle */
        DownloadableStyle: {
            /** Stylename */
            styleName: string;
            /** Styleid */
            styleId: number;
            /** Version */
            version: string;
            /** Iconbase64 */
            iconBase64: string;
            /** Voicesamplebase64S */
            voiceSampleBase64s: string[];
            /** Downloadurl */
            downloadUrl: string;
        };
        /** EngineInfo */
        EngineInfo: {
            /** Device */
            device: string;
            /** Version */
            version: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** MoraDuration */
        MoraDuration: {
            /** Mora */
            mora: string;
            /** Hira */
            hira: string;
            /** Phonemepitches */
            phonemePitches: components["schemas"]["PhonemeDuration"][];
            wavRange: components["schemas"]["TimeRange"];
        };
        /** PhonemeDuration */
        PhonemeDuration: {
            /** Phoneme */
            phoneme: string;
            wavRange: components["schemas"]["TimeRange"];
        };
        /** Phrase */
        Phrase: {
            /** Detail */
            detail: components["schemas"]["coeirocore__mora__Mora"][][];
        };
        /** Prosody */
        Prosody: {
            /** Plain */
            plain: string[];
            /** Detail */
            detail: components["schemas"]["coeirocore__mora__Mora"][][];
        };
        /** ProsodyMakingParam */
        ProsodyMakingParam: {
            /** Text */
            text: string;
        };
        /** Speaker */
        Speaker: {
            /** Name */
            name: string;
            /** Speaker Uuid */
            speaker_uuid: string;
            /** Styles */
            styles: components["schemas"]["coeirocore__model__Style"][];
            /** Version */
            version: string;
        };
        /** SpeakerFolderPath */
        SpeakerFolderPath: {
            /** Speakerfolderpath */
            speakerFolderPath: string;
        };
        /** SpeakerInfo */
        SpeakerInfo: {
            /** Policy */
            policy: string;
            /** Portrait */
            portrait: string;
            /** Style Infos */
            style_infos: components["schemas"]["StyleInfo"][];
        };
        /** SpeakerMeta */
        SpeakerMeta: {
            /** Speakername */
            speakerName: string;
            /** Speakeruuid */
            speakerUuid: string;
            /** Styles */
            styles: components["schemas"]["coeirocore__meta__Style"][];
            /**
             * Version
             * @default 0.0.1
             */
            version: string;
            /** Base64Portrait */
            base64Portrait: string;
        };
        /** SpeakerMetaForTextBox */
        SpeakerMetaForTextBox: {
            /** Speakeruuid */
            speakerUuid: string;
            /** Styleid */
            styleId: number;
            /** Speakername */
            speakerName: string;
            /** Stylename */
            styleName: string;
        };
        /** SpeakerPolicy */
        SpeakerPolicy: {
            /** Policy */
            policy?: string;
            /** License */
            license?: string;
        };
        /** Status */
        Status: {
            /** Status */
            status: string;
        };
        /** StyleInfo */
        StyleInfo: {
            /** Id */
            id: number;
            /** Icon */
            icon: string;
            /** Voice Samples */
            voice_samples: string[];
        };
        /** SynthesisParam */
        SynthesisParam: {
            /** Volumescale */
            volumeScale: number;
            /** Pitchscale */
            pitchScale: number;
            /** Intonationscale */
            intonationScale: number;
            /** Prephonemelength */
            prePhonemeLength: number;
            /** Postphonemelength */
            postPhonemeLength: number;
            /** Outputsamplingrate */
            outputSamplingRate: number;
            /** Sampledintervalvalue */
            sampledIntervalValue?: number;
            /** Adjustedf0 */
            adjustedF0?: number[];
            /** Processingalgorithm */
            processingAlgorithm?: string;
            /**
             * Starttrimbuffer
             * @default 0
             */
            startTrimBuffer: number;
            /**
             * Endtrimbuffer
             * @default 0
             */
            endTrimBuffer: number;
            /** Pauselength */
            pauseLength?: number;
            /**
             * Pausestarttrimbuffer
             * @default 0
             */
            pauseStartTrimBuffer: number;
            /**
             * Pauseendtrimbuffer
             * @default 0
             */
            pauseEndTrimBuffer: number;
            /** Speakeruuid */
            speakerUuid: string;
            /** Styleid */
            styleId: number;
            /** Text */
            text: string;
            /** Prosodydetail */
            prosodyDetail?: components["schemas"]["coeirocore__mora__Mora"][][];
            /** Speedscale */
            speedScale: number;
        };
        /** TimeRange */
        TimeRange: {
            /** Start */
            start: number;
            /** End */
            end: number;
        };
        /** UpdateInfo */
        UpdateInfo: {
            /** Version */
            version: string;
            /** Date */
            date: string;
            /** Contents */
            contents: string[];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** WavMakingParam */
        WavMakingParam: {
            /** Speakeruuid */
            speakerUuid: string;
            /** Styleid */
            styleId: number;
            /** Text */
            text: string;
            /** Prosodydetail */
            prosodyDetail?: components["schemas"]["coeirocore__mora__Mora"][][];
            /** Speedscale */
            speedScale: number;
        };
        /** WavProcessingParam */
        WavProcessingParam: {
            /** Volumescale */
            volumeScale: number;
            /** Pitchscale */
            pitchScale: number;
            /** Intonationscale */
            intonationScale: number;
            /** Prephonemelength */
            prePhonemeLength: number;
            /** Postphonemelength */
            postPhonemeLength: number;
            /** Outputsamplingrate */
            outputSamplingRate: number;
            /** Sampledintervalvalue */
            sampledIntervalValue?: number;
            /** Adjustedf0 */
            adjustedF0?: number[];
            /** Processingalgorithm */
            processingAlgorithm?: string;
            /**
             * Starttrimbuffer
             * @default 0
             */
            startTrimBuffer: number;
            /**
             * Endtrimbuffer
             * @default 0
             */
            endTrimBuffer: number;
            /** Pauselength */
            pauseLength?: number;
            /**
             * Pausestarttrimbuffer
             * @default 0
             */
            pauseStartTrimBuffer: number;
            /**
             * Pauseendtrimbuffer
             * @default 0
             */
            pauseEndTrimBuffer: number;
            /** Wavbase64 */
            wavBase64: string;
            /** Moradurations */
            moraDurations?: components["schemas"]["MoraDuration"][];
        };
        /** WavWithDuration */
        WavWithDuration: {
            /** Wavbase64 */
            wavBase64: string;
            /** Moradurations */
            moraDurations: components["schemas"]["MoraDuration"][];
            /**
             * Starttrimbuffer
             * @default 0
             */
            startTrimBuffer: number;
            /**
             * Endtrimbuffer
             * @default 0
             */
            endTrimBuffer: number;
        };
        /** WorldF0 */
        WorldF0: {
            /** F0 */
            f0: number[];
            /** Moradurations */
            moraDurations: components["schemas"]["MoraDuration"][];
        };
        /** Style */
        coeirocore__meta__Style: {
            /** Stylename */
            styleName: string;
            /** Styleid */
            styleId: number;
            /** Base64Icon */
            base64Icon: string;
            /** Base64Portrait */
            base64Portrait?: string;
        };
        /** Style */
        coeirocore__model__Style: {
            /** Name */
            name: string;
            /** Id */
            id: number;
        };
        /** Mora */
        coeirocore__mora__Mora: {
            /** Phoneme */
            phoneme: string;
            /** Hira */
            hira: string;
            /** Accent */
            accent: number;
        };
        /** Mora */
        coeirocore__v_util__Mora: {
            /** Text */
            text: string;
            /** Consonant */
            consonant?: string;
            /** Consonantlength */
            consonantLength?: number;
            /** Vowel */
            vowel: string;
            /** Vowellength */
            vowelLength: number;
            /** Pitch */
            pitch: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    read_root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    get_speakers_v1_speakers_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpeakerMeta"][];
                };
            };
        };
    };
    estimate_prosody_v1_estimate_prosody_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProsodyMakingParam"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Prosody"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    estimate_prosody_from_kana_v1_estimate_prosody_from_kana_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProsodyMakingParam"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Phrase"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    estimate_f0_v1_estimate_f0_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WavWithDuration"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorldF0"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    predict_v1_predict_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WavMakingParam"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "audio/wav": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    predict_v1_predict_with_duration_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WavMakingParam"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WavWithDuration"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    process_v1_process_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WavProcessingParam"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "audio/wav": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    process_with_pitch_v1_process_with_pitch_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Temporary Redirect to /v1/process */
            307: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    synthesis_v1_synthesis_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SynthesisParam"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "audio/wav": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_dictionary_v1_set_dictionary_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DictionaryWords"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_default_processing_algorithm_v1_set_default_processing_algorithm_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AlgorithmSettings"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_download_info_v1_download_info_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadableModel"][];
                };
            };
        };
    };
    get_downloadable_speakers_v1_downloadable_speakers_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadableSpeaker"][];
                };
            };
        };
    };
    get_speaker_folder_path_v1_speaker_folder_path_get: {
        parameters: {
            query?: {
                speakerUuid?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpeakerFolderPath"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    speaker_folder_path_v1_query2prosody_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AudioQuery"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Prosody"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    speaker_folder_path_v1_style_id_to_speaker_meta_post: {
        parameters: {
            query?: {
                styleId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpeakerMetaForTextBox"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_sample_voice_v1_sample_voice_get: {
        parameters: {
            query?: {
                speakerUuid?: string;
                styleId?: number;
                index?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "audio/wav": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_speaker_policy_v1_speaker_policy_get: {
        parameters: {
            query?: {
                speakerUuid?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpeakerPolicy"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_update_info_v1_update_info_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateInfo"][];
                };
            };
        };
    };
    get_engine_info_v1_engine_info_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EngineInfo"];
                };
            };
        };
    };
}
